import{_ as g,u as y,o as d,c as _,e as k,f as u,g as v,F as w,b as m,a as T}from"./main-cb29d16d.js";import{u as S}from"./SkillTreeStore-e34a18bb.js";import"./transform-9f729428.js";import{s as P,z as b,a as z}from"./zoom-d4b7039c.js";import{h as I}from"./index-0536990b.js";import{a as X}from"./ascending-3ff63084.js";import{t as Y}from"./tree-6e85cfa8.js";const M={setup(){const t=y(),n=S();return{userDetailsStore:t,skillTreeStore:n}},data(){return{width:6e3,height:null,skill:{id:null,children:[],isMastered:null,isUnlocked:null,container:null,name:null,description:null,tagIDs:[],sprite:null},tree:{},root:{},context:{},panX:5,panY:0,scale:.5,translatePos:{x:50,y:50},scaleMultiplier:.8,startDragOffset:{x:0,y:0},mouseDown:!1,r:1.5}},async mounted(){this.skillTreeStore.userSkills.length==0&&await this.skillTreeStore.getUserSkills(),this.height=window.innerHeight;let t=document.getElementById("canvas");this.context=t.getContext("2d"),this.skill={name:"SKILLS",sprite:null,children:this.skillTreeStore.userSkills},this.getAlgorithm(),P(this.context.canvas).call(b().scaleExtent([.2,8]).on("zoom",({transform:n})=>this.zoomed(n)))},methods:{getAlgorithm(){var t=[];t=JSON.parse(JSON.stringify(this.skill.children));function n(e){for(var s=e.length;s--;){if(e[s].type=="super"&&e[s].position!="end"){var p=[],r=[];for(let a=0;a<e[s].children.length;a++)e[s].children[a].type=="sub"?p.push(e[s].children[a]):r.push(e[s].children[a]);var f={skill_name:e[s].skill_name,type:"super",position:"end",children:p};e[s].children=[],e[s].children.push(f);for(let a=0;a<r.length;a++)e[s].children.push(r[a])}typeof e[s]<"u"&&e[s].children&&Array.isArray(e[s].children)&&e[s].children.length>0&&n(e[s].children)}}n(t);var i={skill_name:"My skills",children:t};this.root=I(i);const h=12,o=this.width/(this.root.height+1);this.tree=Y().nodeSize([h,o]),this.root.sort((e,s)=>X(e.data.name,s.data.name)),this.tree(this.root);let l=1/0,x=-l;this.root.each(e=>{e.x>x&&(x=e.x),e.x<l&&(l=e.x)});var c=document.getElementById("canvas");c.width=this.width,c.height=this.height,this.context=c.getContext("2d"),this.drawTree(this.scale,this.translatePos)},drawTree(t,n){const i=this.root.links(),h=this.root.descendants();this.context.beginPath();for(const o of i)this.drawLink(o);this.context.beginPath();for(const o of h)this.drawNode(o)},drawNode(t){this.context.beginPath(),this.context.moveTo(t.y,t.x+500),this.context.arc(t.y,t.x+500,4,0,2*Math.PI),this.context.fillStyle="#000",this.context.fill(),this.context.beginPath(),this.context.strokeStyle="#FFF",this.context.lineWidth=4,this.context.strokeText(t.data.skill_name,t.y+10,t.x+502),this.context.fillStyle="#000",this.context.fillText(t.data.skill_name,t.y+10,t.x+502)},drawLink(t){const n=z().x(i=>i.y).y(i=>i.x+500).context(this.context);this.context.lineWidth=1,this.context.beginPath(),n(t),this.context.strokeStyle="#000",this.context.stroke()},zoomed(t){this.context.save(),this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.translate(t.x,t.y),this.context.scale(t.k,t.k),this.context.beginPath(),this.root.links();const n=this.root.descendants();this.drawTree();for(let i=0;i<n.length;i++)this.context.moveTo(i.x+this.r,i.y),this.context.arc(i.x,i.y,this.r,0,2*Math.PI);this.context.fill(),this.context.restore()},panRight(){this.panX=0,this.panY=0,this.panX=this.panX+50/this.scale,this.redraw()},panLeft(){this.panX=0,this.panY=0,this.panX=this.panX-50/this.scale,this.redraw()},panUp(){this.panX=0,this.panY=0,this.panY=this.panY+50/this.scale,this.redraw()},panDown(){this.panX=0,this.panY=0,this.panY=this.panY-50/this.scale,this.redraw()},redraw(){this.context.save(),this.context.setTransform(1,0,0,1,0,0),this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.beginPath(),this.context.restore(),this.drawTree()},zoomOut(){this.scale/=this.scaleMultiplier,this.drawTree(this.scale,this.translatePos)},zoomIn(){this.scale*=this.scaleMultiplier,this.drawTree(this.scale,this.translatePos)}}},B={id:"canvas",width:"1500",height:"1500"};function D(t,n,i,h,o,l){return d(),_("canvas",B)}const L=g(M,[["render",D],["__scopeId","data-v-2c356d85"]]);const N=m("div",{id:"purple-banner"},null,-1),$=m("span",null,"Loading...",-1),W={__name:"CanvasTidyTreeView",setup(t){return(n,i)=>(d(),_(w,null,[N,(d(),k(v,null,{default:u(()=>[T(L)]),fallback:u(()=>[$]),_:1}))],64))}};export{W as default};
